class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int sum = 0, j = 0, k = 0;
        vector<vector<int>>ans;
        vector<int> tmp;
        if (nums.size() < 3) return ans;
        sum = nums[0] + nums[1] + nums[2];
        if (nums.size() == 3) {
            if (sum == 0)ans.push_back(nums);
            return ans;
        }
        bool isSameZero = 1;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] != 0) {
                isSameZero = 0;
                break;
            }
        }
        if (isSameZero) {
            tmp.push_back(nums[0]);
            tmp.push_back(nums[1]);
            tmp.push_back(nums[2]);
            ans.push_back(tmp);
            tmp.clear();
            return ans;
        }
        sum = 0;
        std::sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() - 2; ++i) {
            j = i + 1;
            k = nums.size() - 1;
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            while (j < k) {
                sum = nums[i] + nums[j] + nums[k];
                if (sum == 0) {
                    tmp.push_back(nums[i]);
                    tmp.push_back(nums[j]);
                    tmp.push_back(nums[k]);
                    ans.push_back(tmp);
                    tmp.clear();
                    while (nums[k] == nums[k - 1] && k - 1 > 1) k--;
                    while (nums[j] == nums[j + 1] && j + 1 < nums.size()-1) j++;

                    j++;
                    k--;
                }
                else if (sum < 0)j++;
                else k--;

            }
        }
        return ans;
    }
};

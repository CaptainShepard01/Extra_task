class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {        
        if (nums1.size() > nums2.size())return findMedianSortedArrays(nums2, nums1);
        int n = nums1.size();
        int m = nums2.size();

        int left = 0;
        int right = n;

        while (left <= right) {
            int iterX = (left + right) / 2;
            int iterY = (n + m + 1) / 2 - iterX;

            int maxLeftX = (iterX == 0) ? INT_MIN : nums1[iterX - 1];
            int minRightX = (iterX == n) ? INT_MAX : nums1[iterX];

            int maxLeftY = (iterY == 0) ? INT_MIN : nums2[iterY - 1];
            int minRightY = (iterY == m) ? INT_MAX : nums2[iterY];

            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                if ((n + m) % 2 == 0)
                    return (double)((std::fmax(maxLeftX, maxLeftY) +
                        std::fmin(minRightX, minRightY)) / 2);
                else
                    return (double)std::fmax(maxLeftX, maxLeftY);
            }
            else if (maxLeftX > minRightY) right = iterX - 1;
            else left = iterX + 1;
        }
        return 0;
    }
};

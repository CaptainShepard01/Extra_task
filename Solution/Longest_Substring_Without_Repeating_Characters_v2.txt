class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length(), ans = 0;
        bool isRepeated = 0;
        vector<char> tmp;
        if(s.length()==0)return 0;
        for (int i = 0; i < n; ++i) {
            tmp.push_back(s[i]);
            for (int j = i + 1; j < n; ++j) {
                for (int k = 0; k < tmp.size(); ++k) {
                    if (s[j] == tmp[k]) {
                        isRepeated = 1;
                        break;
                    }
                }
                if(!isRepeated) tmp.push_back(s[j]);
                if (!isRepeated) {
                    ans = std::max(ans, j - i + 1);
                    //if (ans < (j - i + 1))ans = j - i + 1;
                }
                else {
                    tmp.clear();
                    j = n;
                    isRepeated = 0;
                }
            }
        }

        if(ans==0)return 1;
        return ans;
    }
};


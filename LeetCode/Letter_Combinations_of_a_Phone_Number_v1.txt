class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if (digits.empty()) return {};
        
        unordered_map<char, string> phone {{'2', "abc"}, {'3', "def"}, {'4', "ghi"}, </div><div class="ace_line" style="height:17px">            {'5', "jkl"}, {'6', "mno"}, {'7', "pqrs"}, {'8', "tuv"}, {'9', "wxyz"}};
        vector<string> res; string comb(digits.length(), ' ');
        letterCombinations(digits, comb, 0, phone, res);
        return res;
    }
    
    void letterCombinations(string digits, string& comb, int idx,  unordered_map<char</div><div class="ace_line" style="height:17px">        , string>& phone, vector<string>& res)
    {
        if (idx == digits.length()){
            res.push_back(comb);
            return;
        }
        
        for (char c : phone[digits[idx]]){
            comb[idx] = c;
            letterCombinations(digits, comb, idx + 1, phone, res);
        }
    } 
};
